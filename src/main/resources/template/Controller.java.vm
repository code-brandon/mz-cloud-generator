package ${package}.${moduleName}.controller;

import java.util.Arrays;
import java.util.Map;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

import ${package}.${moduleName}.utils.PageUtils;
import ${package}.${moduleName}.utils.R;

import ${package}.${moduleName}.entity.${className}Entity;
import ${package}.${moduleName}.service.${className}Service;



/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Api(tags = "${comments}")
@RestController
@RequestMapping("${moduleName}/${pathName}")
public class ${className}Controller {
    @Autowired
    private ${className}Service ${classname}Service;

    /**
     * 分页条件查询所有数据
     * @param params  请求集合
     * @return 所有数据
     */
    @ApiImplicitParams({
            @ApiImplicitParam(name="page",value="当前页码",dataType = "String", paramType = "query",example="1"),
            @ApiImplicitParam(name="limit",value="每页显示记录数",dataType = "String", paramType = "query",example="10")
    })
    @ApiOperation("分页条件查询所有数据")
    @PostMapping("/queryPage")
    public R<PageUtils<${className}Entity>> queryPage(@RequestBody @ApiParam(name="${comments}",value="${comments} 实体对象",required=true) ${className}Entity ${classname},@RequestParam @ApiIgnore() Map<String, Object> params){
        PageUtils<${className}Entity> page = ${classname}Service.queryPage(${classname},params);
        return R.ok(page);
    }

    /**
     * 查询所有数据
     * @return 所有数据
     */
    @ApiOperation("查询所有数据")
    @GetMapping("/list")
    public R<List<${className}Entity>> queryList(){
        List<${className}Entity> ${classname}s = ${classname}Service.list();
        return R.ok(${classname}s);
    }


    /**
     * 通过主键查询单条数据
     * @param ${pk.attrname} 主键
     * @return 单条数据
     */
    @ApiImplicitParams({
            @ApiImplicitParam(name="${pk.attrname}",value="主键",dataType = "String", paramType = "path",example="1")
    })
    @ApiOperation("通过主键查询单条数据")
    @GetMapping("/info/{${pk.attrname}}")
    public R<${className}Entity> info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
            ${className}Entity ${classname} = ${classname}Service.getById(${pk.attrname});

        return Objects.nonNull(${classname}) ? R.ok(${classname}): R.fail(Boolean.FALSE);
    }

    /**
     * 保存数据
     * @param ${classname} 实体对象
     * @return 新增结果
     */
    @ApiOperation("保存数据")
    @PostMapping("/save")
    public R<Boolean> save(@RequestBody @ApiParam(name="${comments}",value="${comments} 实体对象",required=true) ${className}Entity ${classname}){

        return ${classname}Service.save(${classname}) ? R.ok(Boolean.TRUE) : R.fail(Boolean.FALSE);
    }

    /**
     * 修改数据
     * @param ${classname} 实体对象
     * @return 修改结果
     */
    @ApiOperation("修改数据")
    @PutMapping("/update")
    public R<Boolean> update(@RequestBody @ApiParam(name="${comments}",value="${comments} 实体对象",required=true) ${className}Entity ${classname}){

        return ${classname}Service.updateById(${classname}) ? R.ok(Boolean.TRUE) : R.fail(Boolean.FALSE);
    }

    /**
     * 删除数据
     * @param ${pk.attrname}s 集合/数组
     * @return 删除结果
     */
    @ApiOperation("删除数据")
    @DeleteMapping("/delete")
    public R<Boolean> delete(@RequestBody @ApiParam(name="ID",value="ID集合",required=true) ${pk.attrType}[] ${pk.attrname}s){

        return ${classname}Service.removeByIds(Arrays.asList(${pk.attrname}s)) ? R.ok(Boolean.TRUE) : R.fail(Boolean.FALSE);
    }

}
